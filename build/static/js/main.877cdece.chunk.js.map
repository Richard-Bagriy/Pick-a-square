{"version":3,"sources":["store/index.ts","components/Logo.tsx","components/GameOptions/Select.tsx","components/GameOptions/Input.tsx","components/GameOptions/Button.tsx","components/GameOptions/index.tsx","components/Engine.tsx","utils/index.ts","components/Winner.tsx","components/Board/Col.tsx","components/Board/Row.tsx","components/Board/index.tsx","components/History.tsx","components/GameDesk.tsx","components/App.tsx","serviceWorker.ts","index.tsx","assets/svg/logo.svg"],"names":["GameContext","createContext","initialState","settings","name","field","delay","id","setting","userName","board","start","end","score","pc","player","winner","time","history","reducer","state","action","type","payload","Array","fill","map","row","y","col","x","value","setGameBoard","size","setGameStart","setGameEnd","setCol","Logo","className","src","logo","alt","Select","useContext","dispatch","disabled","onChange","e","currentTarget","Number","setGameSetting","defaultValue","key","Input","placeholder","Button","useState","text","setText","setDisabled","useEffect","length","Object","keys","onClick","GameOptions","Engine","currentBoard","useRef","random","setRandom","setInterval","search","search_random","Math","floor","getRandomField","current","clearInterval","forEach","el","winScore","date","Date","formattedDate","getHours","getMinutes","getSeconds","dispatchWinner","setWinner","addToHistory","Winner","Col","React","color","createColor","Row","fields","Board","History","GameDesk","App","useReducer","Provider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.877cdece.chunk.js","sourcesContent":["import { createContext, Dispatch } from \"react\"\n\nconst SET_SETTING = 'GAME/SET_SETTING'\nconst SET_USER_NAME = 'GAME/SET_USER_NAME'\nconst SET_GAME_BOARD = 'GAME/SET_GAME_BOARD'\nconst SET_GAME_START = 'GAME/SET_GAME_START'\nconst SET_GAME_END = 'GAME/SET_GAME_END'\nconst SET_SCORE_PC = 'GAME/SET_SCORE_PC'\nconst SET_SCORE_PLAYER = 'GAME/SET_SCORE_PLAYER'\nconst SET_WINNER = 'GAME/SET_WINNER'\nconst ADD_TO_HISTORY = 'GAME/ADD_TO_HISTORY'\nconst CLEAR_SCORE = 'GAME/CLEAR_SCORE'\nconst SET_COL = 'GAME/SET_COL'\n\ntype SettingType = {\n    name: string\n    field: number\n    delay: number\n    id: number\n}\n\nexport type WinnerType = {\n    time: string\n    name: string\n}\n\ntype InitialStateType = {\n    settings: Array<SettingType>\n    setting: SettingType\n    userName: string\n    board: Array<Array<number>> | []\n    start: boolean\n    end: boolean\n    score: { pc: number, player: number }\n    winner: WinnerType\n    history: Array<WinnerType> | []\n}\n\ntype GameContextType = {\n    state: InitialStateType\n    dispatch: Dispatch<ActionType>\n}\n\nexport const GameContext = createContext({} as GameContextType)\n\nexport const initialState: InitialStateType = {\n    settings: [ \n        { name: 'Easy', field: 5, delay: 2000, id: 0 },\n        { name: 'Normal', field: 10, delay: 1000, id: 1 },\n        { name: 'Hard', field: 15, delay: 900, id: 2 }\n    ],\n    setting: { name: '', field: 0, delay:0, id: 0 },\n    userName: '',\n    board: [],\n    start: false,\n    end: false,\n    score: { pc: 0, player: 0 },\n    winner: { time: '', name: '' },\n    history: []\n}\n\nexport const reducer = (state = initialState, action: ActionType): InitialStateType => {\n    switch (action.type) {\n        case SET_SETTING: \n            return {\n                ...state,\n                setting: action.payload\n            }\n        case SET_USER_NAME:\n            return {\n                ...state,\n                userName: action.payload\n            }\n        case SET_GAME_BOARD: \n            return {\n                ...state,\n                board: [\n                    ...new Array(action.payload).fill(0)\n                        .map(() => new Array(action.payload).fill(0) )\n                ]\n            }\n        case SET_GAME_START:\n            return {\n                ...state,\n                start: action.payload\n            }\n        case SET_GAME_END:\n            return {\n                ...state,\n                end: action.payload\n            }\n        case SET_SCORE_PC: \n            return {\n                ...state,\n                score: {\n                    ...state.score,\n                    pc: state.score.pc + 1\n                },\n            }\n        case SET_SCORE_PLAYER:\n            return {\n                ...state,\n                score: {\n                    ...state.score,\n                    player: state.score.player + 1\n                },\n            }\n        case SET_WINNER:\n            return {\n                ...state,\n                winner: action.payload\n            }\n        case ADD_TO_HISTORY:\n            return {\n                ...state,\n                history: [...state.history, action.payload]\n            }\n        case CLEAR_SCORE:\n            return {\n                ...state,\n                score: { player: 0, pc: 0 }\n            }\n        case SET_COL:\n            return {\n                ...state,\n                // Todo: Change that in future\n                // @ts-ignore\n                board: state.board.map((row: any, y: any) => \n                    (y === action.payload.y)\n                        ? row.map((col: any, x: any) => \n                            (x === action.payload.x)\n                                ? action.payload.value\n                                : col\n                        )\n                        : row\n                )\n            }\n        default: return state\n    }\n}\n\nexport type ActionType = SetGameSettingType | SetUserNameType | SetGameBoardType | SetGameStartType | SetGameEndType | SetColType \n    | SetScorePcType | SetScorePlayerType | SetWinnerType | AddToHistoryType | ClearScroreType\n\ntype SetGameSettingType = {\n    type: typeof SET_SETTING\n    payload: SettingType\n}\nexport const setGameSetting = (setting: SettingType): SetGameSettingType => ({ type: SET_SETTING, payload: setting })\n\ntype SetUserNameType = {\n    type: typeof SET_USER_NAME\n    payload: string\n\n}\nexport const setUserName = (name: string): SetUserNameType => ({ type: SET_USER_NAME, payload: name })\n\ntype SetGameBoardType = {\n    type: typeof SET_GAME_BOARD\n    payload: number\n}\nexport const setGameBoard = (size: number): SetGameBoardType => ({ type: SET_GAME_BOARD, payload: size })\n\ntype SetGameStartType = {\n    type: typeof SET_GAME_START\n    payload: boolean\n}\nexport const setGameStart = (start: boolean): SetGameStartType => ({ type: SET_GAME_START, payload: start })\n\ntype SetGameEndType = {\n    type: typeof SET_GAME_END\n    payload: boolean\n}\nexport const setGameEnd = (end: boolean): SetGameEndType => ({ type: SET_GAME_END, payload: end })\n\ntype SetColProps = {\n    x: number\n    y: number\n    value: number\n}\ntype SetColType = {\n    type: typeof SET_COL\n    payload: SetColProps\n}\nexport const setCol: (obj: SetColProps) => SetColType \n    = ({ x, y, value }) => ({ type: SET_COL, payload: { x, y, value } })\n\ntype SetScorePcType = {\n    type: typeof SET_SCORE_PC\n}\nexport const setScorePc = (): SetScorePcType => ({ type: SET_SCORE_PC })\n\ntype SetScorePlayerType = {\n    type: typeof SET_SCORE_PLAYER\n}\nexport const setScorePlayer = (): SetScorePlayerType => ({ type: SET_SCORE_PLAYER })\n\ntype SetWinnerType = {\n    type: typeof SET_WINNER\n    payload: WinnerType\n}\nexport const setWinner = (winner: WinnerType): SetWinnerType => ({ type: SET_WINNER, payload: winner })\n\ntype AddToHistoryType = {\n    type: typeof ADD_TO_HISTORY\n    payload: WinnerType\n}\nexport const addToHistory = (winner: WinnerType): AddToHistoryType => ({ type: ADD_TO_HISTORY, payload: winner })\n\ntype ClearScroreType = {\n    type: typeof CLEAR_SCORE\n}\nexport const clearScore = (): ClearScroreType => ({ type: CLEAR_SCORE })","import React from 'react'\nimport logo from '../assets/svg/logo.svg';\n\nconst Logo: React.FC = () => (\n    <h1 className=\"flex align-items-center justify-content-center logo-header h1\">\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n        Pick a square (Game)\n    </h1>\n)\n\nexport default Logo","import React, { useContext } from 'react'\nimport { GameContext, setGameSetting, setGameBoard } from '../../store'\n\nconst Select: React.FC = () => {\n    const { state: { settings, start } , dispatch } = useContext(GameContext)\n    \n    const handleChange = (e : React.ChangeEvent<HTMLSelectElement> ) => {\n        const { currentTarget: { value } } = e\n        const setting = settings[Number(value)]\n        \n        dispatch(setGameSetting(setting))\n        dispatch(setGameBoard(setting.field))\n    }\n    \n    return <select className=\"select\" disabled={start} onChange={handleChange} defaultValue=\"-\">\n        <option disabled value=\"-\" >Select game mode</option>\n        { settings.map(({ name, id }) => (\n            <option value={id} key={id}>{name}</option>\n        ))}\n    </select>\n}\n\nexport default Select","import React, { useContext } from 'react'\nimport { GameContext, setUserName } from '../../store'\n\nconst Input: React.FC = () => {\n    const { state: { userName, start }, dispatch } = useContext(GameContext)\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { currentTarget: { value } } = e\n        dispatch(setUserName(value))\n    }\n\n    return <input \n        type=\"text\" \n        placeholder=\"Enter User name\" \n        name=\"user-name\" \n        className=\"input\" \n        value={userName} \n        onChange={handleChange} \n        disabled={start}\n    />\n}\n\nexport default Input","import React, { useState, useContext, useEffect } from 'react'\nimport { GameContext, setGameStart, setGameEnd, setGameBoard } from '../../store'\n\nconst Button: React.FC = () => {\n    const { state: { userName, setting, end, start } , dispatch } = useContext(GameContext)\n    const [text, setText] = useState('Play')\n    const [disabled, setDisabled] = useState(true)\n\n    useEffect(() => {\n\n        if (userName.length > 1 && Object.keys(setting).length > 0) {\n            setDisabled(false)\n        } else {\n            setDisabled(true)\n        }\n\n        if (end) {\n            setText('Play again')\n        } else {\n            setText('Play')\n        }\n        \n        start && setDisabled(true)\n\n    }, [userName, setting, start, end])\n\n    const handleClick = () => {\n        dispatch(setGameStart(true))\n        dispatch(setGameEnd(false))\n\n        if (setting.field) {\n            dispatch(setGameBoard(setting.field))\n        }\n    }\n    \n    return <button disabled={disabled} onClick={handleClick} className={`button ${disabled ? 'danger' : 'success'} `}>{ text }</button>\n}\n\nexport default Button","import React from 'react'\nimport Select from './Select'\nimport Input from './Input'\nimport Button from './Button'\n\nconst GameOptions: React.FC = () => (\n    <div className=\"game-setting\">\n        <h2>- Game setting - </h2>\n        <div className=\"flex justify-content-around\">\n            <Select />\n            <Input />\n            <Button />\n        </div>\n    </div>\n)\n\nexport default GameOptions","import React, { useContext, useEffect, useRef, useState } from 'react'\nimport { GameContext, setCol, setScorePc, setGameEnd, setGameStart, setWinner, addToHistory, clearScore } from '../store'\nimport { getRandomField } from '../utils'\n\nconst Engine: React.FC = () => {\n    const { state: { board, setting, score, userName }, dispatch } = useContext(GameContext)\n    const currentBoard = useRef<Array<Array<number>>>([])\n    const [random, setRandom] = useState({})\n\n    useEffect(() => {\n        \n        const id = setInterval(() => {\n            const [x, y] = getRandomField(setting.field, currentBoard.current)\n            setRandom({ x, y })\n            dispatch(setCol({ x, y, value: 1 }))\n        }, setting.delay)\n\n        return () => clearInterval(id)\n        \n    }, [])\n\n    useEffect(() => {\n        board.forEach((row, y) => \n            row.forEach( (el, x) => {\n                if (el === 1) {\n                    dispatch(setCol({ x, y, value: 3 }))\n                    dispatch(setScorePc())\n                }\n            })\n        )\n    }, [random])\n\n    useEffect(() => {\n        const winScore = Math.floor((setting.field * setting.field) / 2)\n        const { pc, player } = score\n        const date = new Date()\n        const formattedDate = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\n\n        if (pc >= winScore) {\n            const winner = { name: 'Computer', time: formattedDate }\n            dispatchWinner(winner)\n        }\n\n        if (player >= winScore) {\n            const winner = { name: userName, time: formattedDate }\n            dispatchWinner(winner)\n        }\n\n        currentBoard.current = board\n\n    }, [board])\n    \n    const dispatchWinner = (winner: { name: string, time: string }) => {\n        dispatch(setGameEnd(true))\n        dispatch(setGameStart(false));\n        dispatch(setWinner(winner))\n        dispatch(addToHistory(winner))\n        dispatch(clearScore())\n    }\n    return <></>\n}\n\nexport default Engine","export const getRandomField = (random: number, search: Array<Array<number>>): [number, number] => {\n        \n    let search_random = true;\n    let [x, y] = [\n        Math.floor(Math.random() * random),\n        Math.floor(Math.random() * random)\n    ]\n\n    while (search_random) {\n        if (search[y][x]) {\n            x = Math.floor(Math.random() * random);\n            y = Math.floor(Math.random() * random)\n        } else {\n            search_random = false\n        }\n    }\n\n    return [x, y]\n}","import React from 'react'\n\ntype Props = {\n    name: string\n}\n\nconst Winner: React.FC<Props> = ({ name }) => (\n    <div className=\"winner\">\n        Winner is: { name }\n    </div>\n)\n\nexport default Winner","import React from 'react'\nimport { setScorePlayer, setCol, GameContext } from '../../store'\n\ntype Props = {\n    value: number\n    x: number\n    y: number\n}\n\nconst Col: React.FC<Props> =  ({ value, x, y }) => {\n\n    const { state:{ start }, dispatch } = React.useContext(GameContext)\n\n    const handleClick = () => {\n        if (value === 1 && start) {\n            dispatch(setScorePlayer())\n            dispatch(setCol({ x ,y, value: 2 }))\n        }\n    }\n\n    const createColor = (value: number) => {\n        switch(value) {\n            case 1: \n                return 'blue'\n            case 2: \n                return 'green'\n            case 3: \n                return 'red'\n            default: return ''\n        }\n    }\n\n    const color = createColor(value)\n\n    return <div className={`board__col ${color}`} onClick={handleClick}></div>\n}\n\nexport default Col","import React from 'react'\nimport Col from './Col'\n\ntype Props = {\n    fields: Array<number>\n    y: number\n}\n\nconst Row: React.FC<Props> = ({ fields, y }) =>  (\n    <div className=\"board__row\">\n        { fields.map((value, x) => <Col x={x} y={y} value={value} key={x} /> ) }\n    </div>\n)\n\nexport default Row","import React from 'react'\nimport Row from './Row'\n\ntype Props = {\n    board: Array<Array<number>>\n}\n\nconst Board: React.FC<Props> = ({ board }) => (\n    <div className=\"board\">\n        { board.map((fields, y) => <Row fields={fields} y={y} key={y} /> ) }\n    </div>\n)\n\nexport default Board","import React from 'react'\nimport { WinnerType } from '../store'\n\ntype Props = {\n    history: Array<WinnerType>\n}\n\nconst History:React.FC<Props> = ({ history }) => (\n    <div className=\"history\">\n        <h2 className=\"history__header\">Leader Board</h2>\n        { history.map(({ name, time }) => <div className=\"history__item\">\n            <div>{ name }</div>\n            <div>{ time }</div>\n        </div>) }\n    </div>\n)\n\nexport default History","import React, { useContext } from 'react'\nimport { GameContext } from '../store'\nimport Board from './Board'\nimport History from './History'\n\nconst GameDesk: React.FC = () => {\n    const { state: { board, history } } = useContext(GameContext)\n\n    return <div className=\"game-desk\">\n        <Board board={board} />\n        { history.length > 0 && <History history={history} /> }\n    </div>\n}\n\nexport default GameDesk","import React, { useReducer } from 'react';\nimport { reducer, initialState, GameContext } from '../store';\nimport Logo from './Logo';\nimport GameOptions from './GameOptions';\nimport Engine from './Engine';\nimport Winner from './Winner';\nimport GameDesk from './GameDesk';\n\nconst App: React.FC = () => {\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    return <div className=\"container\">\n        <Logo />\n        <GameContext.Provider value={{ state, dispatch }}>\n            <GameOptions />\n            { state.end && <Winner name={state.winner.name} /> }\n            { state.start && <Engine /> }\n            { state.board.length > 0 &&  <GameDesk />}\n        </GameContext.Provider>\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}